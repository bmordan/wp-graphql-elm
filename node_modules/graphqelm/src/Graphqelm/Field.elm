module Graphqelm.Field exposing (Field(Field), map)

{-| `Field`s are automatically generated by the `graphqelm` CLI command.
You can use `Graphqelm.Field.map` to transform a value.
@docs map, Field
-}

import Graphqelm.RawField as Field exposing (RawField)
import Json.Decode as Decode exposing (Decoder)


{-| -}
type Field decodesTo typeLock
    = Field RawField (Decoder decodesTo)


{-| Maps the data coming back from the GraphQL endpoint. In this example,
`User.name` is a function that the `graphqelm` CLI tool created which tells us
that the `name` field on a `User` object is a String according to your GraphQL
schema.

    import Api.Object
    import Api.Object.User as User
    import Graphqelm.Field as Field
    import Graphqelm.SelectionSet exposing (SelectionSet, with)

    human : SelectionSet String Api.Object.User
    human =
        User.selection identity
            |> with
                (User.name
                    |> Field.map String.toUpper
                )

You can also map to values of a different type (`String -> Int`, for example), see
[`examples/StarWars.elm`](https://github.com/dillonkearns/graphqelm/blob/master/examples/src/Starwars.elm)
for more advanced example.

-}
map : (decodesTo -> mapsTo) -> Field decodesTo typeLock -> Field mapsTo typeLock
map mapFunction (Field field decoder) =
    Field field (Decode.map mapFunction decoder)
