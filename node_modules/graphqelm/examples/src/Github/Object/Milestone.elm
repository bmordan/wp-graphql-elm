-- Do not manually edit this file, it was auto-generated by Graphqelm
-- https://github.com/dillonkearns/graphqelm


module Github.Object.Milestone exposing (..)

import Github.Enum.IssueState
import Github.Enum.MilestoneState
import Github.InputObject.IssueOrder
import Github.Interface
import Github.Object
import Github.Scalar
import Github.Union
import Graphqelm.Field as Field exposing (Field)
import Graphqelm.Internal.Builder.Argument as Argument exposing (Argument)
import Graphqelm.Internal.Builder.Object as Object
import Graphqelm.Internal.Encode as Encode exposing (Value)
import Graphqelm.OptionalArgument exposing (OptionalArgument(Absent))
import Graphqelm.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| Select fields to build up a SelectionSet for this object.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) Github.Object.Milestone
selection constructor =
    Object.selection constructor


{-| `true` if the object is closed (definition of closed may depend on type)
-}
closed : Field Bool Github.Object.Milestone
closed =
    Object.fieldDecoder "closed" [] Decode.bool


{-| Identifies the date and time when the object was closed.
-}
closedAt : Field (Maybe Github.Scalar.DateTime) Github.Object.Milestone
closedAt =
    Object.fieldDecoder "closedAt" [] (Decode.string |> Decode.map Github.Scalar.DateTime |> Decode.maybe)


{-| Identifies the date and time when the object was created.
-}
createdAt : Field Github.Scalar.DateTime Github.Object.Milestone
createdAt =
    Object.fieldDecoder "createdAt" [] (Decode.string |> Decode.map Github.Scalar.DateTime)


{-| Identifies the actor who created the milestone.
-}
creator : SelectionSet decodesTo Github.Interface.Actor -> Field (Maybe decodesTo) Github.Object.Milestone
creator object =
    Object.selectionField "creator" [] object (identity >> Decode.maybe)


{-| Identifies the description of the milestone.
-}
description : Field (Maybe String) Github.Object.Milestone
description =
    Object.fieldDecoder "description" [] (Decode.string |> Decode.maybe)


{-| Identifies the due date of the milestone.
-}
dueOn : Field (Maybe Github.Scalar.DateTime) Github.Object.Milestone
dueOn =
    Object.fieldDecoder "dueOn" [] (Decode.string |> Decode.map Github.Scalar.DateTime |> Decode.maybe)


id : Field Github.Scalar.Id Github.Object.Milestone
id =
    Object.fieldDecoder "id" [] (Decode.string |> Decode.map Github.Scalar.Id)


{-| A list of issues associated with the milestone.

  - first - Returns the first _n_ elements from the list.
  - after - Returns the elements in the list that come after the specified global ID.
  - last - Returns the last _n_ elements from the list.
  - before - Returns the elements in the list that come before the specified global ID.
  - labels - A list of label names to filter the pull requests by.
  - orderBy - Ordering options for issues returned from the connection.
  - states - A list of states to filter the issues by.

-}
issues : ({ first : OptionalArgument Int, after : OptionalArgument String, last : OptionalArgument Int, before : OptionalArgument String, labels : OptionalArgument (List String), orderBy : OptionalArgument Github.InputObject.IssueOrder.IssueOrder, states : OptionalArgument (List Github.Enum.IssueState.IssueState) } -> { first : OptionalArgument Int, after : OptionalArgument String, last : OptionalArgument Int, before : OptionalArgument String, labels : OptionalArgument (List String), orderBy : OptionalArgument Github.InputObject.IssueOrder.IssueOrder, states : OptionalArgument (List Github.Enum.IssueState.IssueState) }) -> SelectionSet decodesTo Github.Object.IssueConnection -> Field decodesTo Github.Object.Milestone
issues fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { first = Absent, after = Absent, last = Absent, before = Absent, labels = Absent, orderBy = Absent, states = Absent }

        optionalArgs =
            [ Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "labels" filledInOptionals.labels (Encode.string |> Encode.list), Argument.optional "orderBy" filledInOptionals.orderBy Github.InputObject.IssueOrder.encode, Argument.optional "states" filledInOptionals.states (Encode.enum Github.Enum.IssueState.toString |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionField "issues" optionalArgs object identity


{-| Identifies the number of the milestone.
-}
number : Field Int Github.Object.Milestone
number =
    Object.fieldDecoder "number" [] Decode.int


{-| The repository associated with this milestone.
-}
repository : SelectionSet decodesTo Github.Object.Repository -> Field decodesTo Github.Object.Milestone
repository object =
    Object.selectionField "repository" [] object identity


{-| The HTTP path for this milestone
-}
resourcePath : Field Github.Scalar.Uri Github.Object.Milestone
resourcePath =
    Object.fieldDecoder "resourcePath" [] (Decode.string |> Decode.map Github.Scalar.Uri)


{-| Identifies the state of the milestone.
-}
state : Field Github.Enum.MilestoneState.MilestoneState Github.Object.Milestone
state =
    Object.fieldDecoder "state" [] Github.Enum.MilestoneState.decoder


{-| Identifies the title of the milestone.
-}
title : Field String Github.Object.Milestone
title =
    Object.fieldDecoder "title" [] Decode.string


{-| The HTTP URL for this milestone
-}
url : Field Github.Scalar.Uri Github.Object.Milestone
url =
    Object.fieldDecoder "url" [] (Decode.string |> Decode.map Github.Scalar.Uri)
